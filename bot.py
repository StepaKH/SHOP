import os
import re
import sqlite3

import telebot
from telebot import types

import checkUser
import config
import editUser
import getInfAboutProduct


user_states = {}

bot = telebot.TeleBot(config.TOKEN)
bot.set_webhook()


def mainKeyboard(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bottom1 = types.KeyboardButton("–ì–ª–∞–≤–Ω–∞—è")
    bottom2 = types.KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
    bottom3 = types.KeyboardButton("–ó–∞–∫–∞–∑")
    markup.row(bottom1, bottom2)
    markup.add(bottom3)
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=markup)


@bot.message_handler(commands=['start', 'main', 'hello'])
@bot.message_handler(func=lambda message: message.text.lower() == '–≥–ª–∞–≤–Ω–∞—è')
def welcome(message):
    # DB
    conn = sqlite3.connect('shop.sql')
    cur = conn.cursor()

    cur.execute(
        'CREATE TABLE IF NOT EXISTS users (id int auto_increment primary key, name varchar(255), tgId varchar(20) '
        'unique not null, phone varchar(20), has_card integer default(0))')

    conn.commit()
    cur.close()
    conn.close()
    ###

    user_states[message.chat.id] = {'name': None, 'phone': None, 'tgId': None, 'card': 0, 'size': None}
    sti = open('static/welcome.webp', 'rb')

    bot.send_sticker(message.chat.id, sti)
    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n "
                                      "–Ø - <b>—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç–∫–∞–Ω–µ–π</b>, –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.".format(
        message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=types.ReplyKeyboardRemove())

    markup = types.InlineKeyboardMarkup()
    btn1 = types.InlineKeyboardButton("–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏", callback_data='status')
    btn2 = types.InlineKeyboardButton("–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='order')

    markup.row(btn1, btn2)
    bot.send_message(message.chat.id,
                     "{0.first_name}, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–°—Ç–∞—Ç—É—Å –ø–æ—Å—ã–ª–∫–∏</b>.\n"
                     "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ <b>–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b>".format(message.from_user,
                                                                                         bot.get_me()),
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['order'])
@bot.message_handler(func=lambda message: message.text.lower() in {'–∑–∞–∫–∞–∑', '–∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ'})
def order(message):
    user_states[message.chat.id] = {'token': None}
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–∞—Ä—Ç–∏–∫—É–ª</b> —Ç–æ–≤–∞—Ä–∞\n"
                                      "<b>–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 875234</b>\n\n"
                                      "–ï—Å–ª–∏ –≤—ã –∑–∞–±—ã–ª–∏ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, —Ç–æ –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ–π—Ç–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ\n"
                                      "<b>–í–æ—Ç —Å—Å—ã–ª–∫–∞ -> https://t.me/bravissimo_nn</b>", parse_mode='html',
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_token)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω–¥–µ—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ –≤—ã–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞


def get_token(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['token'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['token']):
            mainKeyboard(message)
        else:
            user_states[message.chat.id]['product_data'] = getInfAboutProduct.get_product_data(
                user_states[message.chat.id]['token'])
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
            if not user_states[message.chat.id]['product_data']:
                bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüò¢\n'
                                                  f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
                order(message)
            else:
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                bottom1 = types.KeyboardButton("–í–µ—Ä–Ω–æ")
                bottom2 = types.KeyboardButton("–ù–µ–≤–µ—Ä–Ω–æ")
                bottom3 = types.KeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
                markup.row(bottom1, bottom2)
                markup.add(bottom3)

                bot.send_message(message.chat.id, "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–ª–∏ –∞—Ä—Ç–∏–∫—É–ª\n"
                                                  "–î–∞–Ω–Ω—ã–µ –ø–æ –¥–∞–Ω–Ω–æ–º—É –∞—Ä—Ç–∏–∫—É–ª—É:")

                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
                file_path = os.path.join('photos',
                                         f'{user_states[message.chat.id]["product_data"][4]}.jpg')  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
                img = open(f"{file_path}", 'rb')

                bot.send_photo(message.chat.id, img,
                               caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[message.chat.id]["product_data"][1]}\n –¶–µ–Ω–∞: {user_states[message.chat.id]["product_data"][2]}\n –î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∞: {user_states[message.chat.id]["product_data"][3]}\n –ê—Ä—Ç–∏–∫—É–ª: {user_states[message.chat.id]["product_data"][4]}',
                               reply_markup=markup)
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
                bot.register_next_step_handler(message, check_product)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–º")
        order(message)


def check_product(message):
    if message.content_type == 'text':
        if re.match('^/', message.text.strip()):
            mainKeyboard(message)
        elif message.text.strip() == '–ù–µ–≤–µ—Ä–Ω–æ':
            order(message)
        elif message.text.strip() == '–í–µ—Ä–Ω–æ':
            get_info_user(message)
        elif message.text.strip() == '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è':
            consult2(message)
        else:
            bot.send_message(message.chat.id,
                             "–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫: –í–µ—Ä–Ω–æ –∏–ª–∏ –ù–µ–≤–µ—Ä–Ω–æ, –ª–∏–±–æ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º")
            bot.register_next_step_handler(message, check_product)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—Å—Ç–æ–º")
        bot.register_next_step_handler(message, check_product)


def get_info_user(message):
    # Register users
    user_states[message.chat.id]['user_data'] = checkUser.get_user_data(message.from_user.id)
    if user_states[message.chat.id]['user_data']:
        user_states[message.chat.id]['waiting_for_button'] = True
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
        bottom2 = types.InlineKeyboardButton('–ò–∑–º–µ–Ω–∏–ª–∏—Å—å', callback_data='edit_data')
        markup.row(bottom1, bottom2)

        user_states[message.chat.id]['name'] = user_states[message.chat.id]['user_data'][1]
        user_states[message.chat.id]['phone'] = user_states[message.chat.id]['user_data'][3]
        user_states[message.chat.id]['tgId'] = message.from_user.id

        bot.send_message(message.chat.id, f'–í—ã —É–∂–µ –±—ã–ª–∏ –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –∏ —É –Ω–∞—Å –µ—Å—Ç—å –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µüòÅ',
                         reply_markup=types.ReplyKeyboardRemove())
        bot.send_message(message.chat.id, f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n\n'
                                          f'–§–ò–û: {user_states[message.chat.id]["user_data"][1]}\n'
                                          f'–ù–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]["user_data"][3]}',
                         reply_markup=markup)
        bot.register_next_step_handler(message, check_button_press)
    else:
        bot.send_message(message.chat.id, "–°–µ–π—á–∞—Å –Ω—É–∂–Ω–æ –≤–∞—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å!\n"
                                          "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã —Å–≤–æ–µ –§–ò–û\n"
                                          "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(message, user_name)


def user_name(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['name'] = message.text.strip()

        if re.match('^/', user_states[message.chat.id]['name']):
            mainKeyboard(message)

        elif re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+$', user_states[message.chat.id]['name']):
            # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
                                              "79*********")
            bot.register_next_step_handler(message, user_phone)
        else:
            # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            bot.register_next_step_handler(message, user_name)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, user_name)


def user_phone(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['phone'] = message.text.strip()
        if re.match('^/', user_states[message.chat.id]['phone']):
            mainKeyboard(message)

        elif re.match(r'^79\d{9}$', user_states[message.chat.id]['phone']):
            user_states[message.chat.id]['waiting_for_button'] = True
            user_states[message.chat.id]['tgId'] = message.from_user.id
            markup = types.InlineKeyboardMarkup()
            bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
            bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='false_enter')
            markup.row(bottom1, bottom2)

            bot.send_message(message.chat.id, f'–ú—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüî•')
            bot.send_message(message.chat.id,
                             f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]["name"]}\n –ù–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]["phone"]}',
                             reply_markup=markup)
            bot.register_next_step_handler(message, check_button_press)
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 79).")
            bot.register_next_step_handler(message, user_phone)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 79).")
        bot.register_next_step_handler(message, user_phone)


def consult2(message):
    file_path = os.path.join('photos',
                             f'{user_states[message.chat.id]["product_data"][4]}.jpg')  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
    img = open(f"{file_path}", 'rb')
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
    bot.send_photo(config.manager_id, img,
                   caption=f'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!\n'
                           f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - {user_states[message.chat.id]["product_data"][4]}:\n'
                           f'–ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[message.chat.id]["product_data"][1]}\n'
                           f'–¶–µ–Ω–∞: {user_states[message.chat.id]["product_data"][2]}\n'
                           f'–î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∞: {user_states[message.chat.id]["product_data"][3]}\n\n'

                           f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                           f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {message.from_user.username}\n')

    bot.send_message(message.chat.id,
                     f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ –≤–∞—Å –ø–æ–Ω—è—Ç—å)\n\n'
                     f'<b>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞</b> -> https://t.me/Artv1d', parse_mode='html',
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['pochta'])
@bot.message_handler(func=lambda message: message.text.lower() == '–ø–æ—á—Ç–∞ —Ä–æ—Å—Å–∏–∏')
def pochta(message):
    bot.send_message(message.chat.id, "–ü–µ—Ä–µ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ -> https://www.pochta.ru/tracking\n"
                                      "–ù–∞ —Å–∞–π—Ç–µ –≤ –ø–æ–ª–µ *–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞* –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –±–æ–ª—å—à–µ –æ—Ç –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)",
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['sdek'])
@bot.message_handler(func=lambda message: message.text.lower() == '—Å–¥—ç–∫')
def sdek(message):
    bot.send_message(message.chat.id,
                     "–ü–µ—Ä–µ–π–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ —Å—Å—ã–ª–∫–µ -> https://www.cdek.ru/ru/tracking/\n"
                     "–ù–∞ —Å–∞–π—Ç–µ –≤ –ø–æ–ª–µ *–Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞* –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —Ç—Ä–µ–∫-–Ω–æ–º–µ—Ä –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞, –±–æ–ª—å—à–µ –æ—Ç –≤–∞—Å –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è)",
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['advice'])
@bot.message_handler(func=lambda message: message.text.lower() == '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è')
def consult(message):
    bot.send_message(message.chat.id,
                     f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ –≤–∞—Å –ø–æ–Ω—è—Ç—å)\n\n'
                     f'<b>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞</b> -> https://t.me/Artv1d', parse_mode='html',
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(commands=['end'])
@bot.message_handler(func=lambda message: message.text.lower() == '–∑–∞–∫–æ–Ω—á–∏—Ç—å')
def end(message):
    bot.send_message(message.chat.id, f'–ë—ã–ª–∏ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µüòä',
                     reply_markup=types.ReplyKeyboardRemove())


@bot.message_handler(content_types=['photo', 'video', 'audio', 'sticker', 'emoji'])
def noneContent(message):
    bot.reply_to(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è((')


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'status':
        markup10 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item10 = types.KeyboardButton("–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏")
        item01 = types.KeyboardButton("–°–î–≠–ö")
        markup10.add(item10)
        markup10.add(item01)
        bot.send_message(callback.message.chat.id,
                         "–ï—Å–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É–∂–±–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ *–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏*, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ü–æ—á—Ç–∞ –†–æ—Å—Å–∏–∏</b>, –µ—Å–ª–∏ –≤–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É–∂–±–æ–π –¥–æ—Å—Ç–∞–≤–∫–∏ *–°–î–≠–ö*, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–°–î–≠–ö</b>",
                         parse_mode='html', reply_markup=markup10)

    elif callback.data == 'order':
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ó–∞–∫–∞–∑")
        markup1.add(item1)
        bot.send_message(callback.message.chat.id,
                         "–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É <b>/order</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫–∞–∑</b>",
                         parse_mode='html', reply_markup=markup1)
    elif callback.data == 'true_enter':
        if not user_states[callback.message.chat.id]['user_data']:
            # –î–æ–¥–µ–ª–∞—Ç—å
            conn = sqlite3.connect('shop.sql')
            cur = conn.cursor()
            cur.execute(
                f"INSERT INTO users(name, tgId, phone, has_card) VALUES ('{user_states[callback.message.chat.id]['name']}', '{user_states[callback.message.chat.id]['tgId']}', '{user_states[callback.message.chat.id]['phone']}', '{0}')")
            conn.commit()
            cur.close()
            conn.close()
            user_states[callback.message.chat.id]['card'] = 0
        else:
            user_states[callback.message.chat.id]['card'] = user_states[callback.message.chat.id]['user_data'][4]

        if user_states[callback.message.chat.id]['card'] == 1:
            consultation(callback)
        else:
            check_card(callback)
    elif callback.data == 'card_true':
        user_states[callback.message.chat.id]['card'] = 1
        editUser.update_user_card(user_states[callback.message.chat.id]['card'],
                                  user_states[callback.message.chat.id]['tgId'])
        consultation(callback)
    elif callback.data == 'card_false':
        user_states[callback.message.chat.id]['waiting_for_button'] = True
        user_states[callback.message.chat.id]['card'] = 0
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–•–æ—á—É', callback_data='create_card')
        bottom2 = types.InlineKeyboardButton('–ù–µ —Ö–æ—á—É', callback_data='continue_without_card')
        markup.row(bottom1, bottom2)

        bot.send_message(callback.message.chat.id, f'–≠—Ç–æ –æ—á–µ–Ω—å –≥—Ä—É—Å—Ç–Ω–æ, —á—Ç–æ —É –≤–∞—Å –Ω–µ—Ç –Ω–∞—à–µ–π –¥–∏—Å–∫–æ–Ω—Ç–Ω–æ–π –∫–∞—Ä—Ç—ãüòû '
                                                   f'–ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Å–æ–∑–¥–∞—Ç—å –µ–µ, —á—Ç–æ–±—ã –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å –Ω–∞—à —Ç–æ–≤–∞—Ä –ø–æ –±–æ–ª–µ–µ –≤—ã–≥–æ–¥–Ω–æ–π —Ü–µ–Ω–µ)',
                         reply_markup=markup)
    elif callback.data == 'card_ignorance':
        user_states[callback.message.chat.id]['card'] = 2
        consultation(callback)
    elif callback.data == 'false_enter':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True)
        item1 = types.KeyboardButton("–ó–∞–∫–∞–∑")
        markup1.add(item1)
        bot.send_message(callback.message.chat.id,
                         "–î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω–æ–≤–æ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–æ–º–∞–Ω–¥—É <b>/order</b> –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b>–ó–∞–∫–∞–∑</b>",
                         parse_mode='html', reply_markup=markup1)
    elif callback.data == 'edit_data':
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton("–§–ò–û", callback_data='edit_name')
        bottom2 = types.InlineKeyboardButton("–ù–æ–º–µ—Ä", callback_data='edit_phone')
        bottom3 = types.InlineKeyboardButton("–í—Å–µ", callback_data='edit_all')
        markup.row(bottom1, bottom2)
        markup.add(bottom3)
        bot.send_message(callback.message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∫–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–º–µ–Ω—è–ª–∏—Å—åüôÉ',
                         reply_markup=markup)
    elif callback.data == 'create_card':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n"
                                                   "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 10.10.2000")
        bot.register_next_step_handler(callback.message, lambda message: process_birthday_input(callback, message))
    elif callback.data == 'continue_without_card':
        consultation(callback)
    elif callback.data == 'end_of_buy':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        bot.send_message(callback.message.chat.id,
                         f'–í–≤–µ–¥–∏—Ç–µ —Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –≤ –°–ê–ù–¢–ò–ú–ï–¢–†–ê–•', parse_mode='html',
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(callback.message, end_of_work)
    elif callback.data == 'advice':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        file_path = os.path.join('photos',
                                 f'{user_states[callback.message.chat.id]["product_data"][4]}.jpg')  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
        img = open(f"{file_path}", 'rb')
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
        bot.send_photo(config.manager_id, img,
                       caption=f'–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è!\n'
                               f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - {user_states[callback.message.chat.id]["product_data"][4]}:\n'
                               f'–ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[callback.message.chat.id]["product_data"][1]}\n'
                               f'–¶–µ–Ω–∞: {user_states[callback.message.chat.id]["product_data"][2]}\n'
                               f'–î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∞: {user_states[callback.message.chat.id]["product_data"][3]}\n\n'

                               f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                               f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {callback.message.chat.username}\n'
                               f'–§–ò–û - {user_states[callback.message.chat.id]["name"]}\n'
                               f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {user_states[callback.message.chat.id]["phone"]}\n'
                               f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –∫–∞—Ä—Ç—ã - {"–ï—Å—Ç—å –∫–∞—Ä—Ç–∞" if user_states[callback.message.chat.id]["card"] == 1 else ("–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏" if user_states[callback.message.chat.id]["card"] == 2 else "–ù–µ—Ç –∫–∞—Ä—Ç—ã")}')

        bot.send_message(callback.message.chat.id,
                         f'–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Å–≤–æ–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –º–µ–Ω–µ–¥–∂–µ—Ä —Å–º–æ–≥ –≤–∞—Å –ø–æ–Ω—è—Ç—å)\n\n'
                         f'<b>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ —Å—é–¥–∞</b> -> https://t.me/Artv1d', parse_mode='html',
                         reply_markup=types.ReplyKeyboardRemove())
    elif callback.data == 'edit_name':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã —Å–≤–æ–µ –§–ò–û\n"
                                                   "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(callback.message, get_name)
    elif callback.data == 'edit_phone':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79*********",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(callback.message, get_phone)
    elif callback.data == 'edit_all':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª —Å –±–æ–ª—å—à–æ–π –±—É–∫–≤—ã —Å–≤–æ–µ –§–ò–û\n"
                                                   "–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á\n",
                         reply_markup=types.ReplyKeyboardRemove())
        bot.register_next_step_handler(callback.message, get_name_from_all)
    elif callback.data == 'end':
        user_states[callback.message.chat.id]['waiting_for_button'] = False
        bot.send_message(callback.message.chat.id, f'–ë—ã–ª–∏ —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –º–∞–≥–∞–∑–∏–Ω–µ, –ø—Ä–∏—Ö–æ–¥–∏—Ç–µ –µ—â–µüòä',
                         reply_markup=types.ReplyKeyboardRemove())

    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='–î–∞–ª–µ–µ....',
                          reply_markup=None)


def process_birthday_input(callback, message):
    if message.content_type == 'text':
        user_states[callback.message.chat.id]['birthday'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['birthday']):
            mainKeyboard(message)
        elif re.match(r'^(0[1-9]|1[0-9]|2[0-9]|3[0-1])\.(0[1-9]|1[0-2])\.(19[3-9][0-9]|20[01][0-9])$',
                      user_states[callback.message.chat.id]['birthday']):
            user_states[callback.message.chat.id]['waiting_for_button'] = True
            bot.register_next_step_handler(callback.message, check_button_press)
            bot.send_message(config.manager_id, f'–°–æ–∑–¥–∞—Ç—å –¥–∏—Å–∫–æ–Ω—Ç–Ω—É—é –∫–∞—Ä—Ç—É!\n'
                                                f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                                                f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {callback.message.chat.username}\n'
                                                f'–§–ò–û - {user_states[callback.message.chat.id]["name"]}\n'
                                                f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {user_states[callback.message.chat.id]["phone"]}\n'
                                                f'–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è - {user_states[callback.message.chat.id]["birthday"]}')
            consultation(callback)
        else:
            bot.send_message(callback.message.chat.id,
                             f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì\n'
                             f'–ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞: 10.10.2000')
            bot.register_next_step_handler(callback.message, lambda message: process_birthday_input(callback, message))
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì")
        bot.register_next_step_handler(callback.message, lambda message: process_birthday_input(callback, message))


def end_of_work(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['size'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['size']):
            mainKeyboard(message)
        elif re.match(r'^[0-9]+$', user_states[message.chat.id]['size']):
            user_states[message.chat.id]['price'] = (
                    float(user_states[message.chat.id]['product_data'][2].split(" ")[0]) *
                    float(int(user_states[message.chat.id]['size']) / 100))
            if user_states[message.chat.id]['product_data'][3].split(" ")[1] == '–º':
                user_states[message.chat.id]['size'] = str(int(user_states[message.chat.id]['size']) / 100)
            if float(user_states[message.chat.id]['size']) <= float(
                    user_states[message.chat.id]['product_data'][3].split(" ")[0]):
                file_path = os.path.join('photos',
                                         f'{user_states[message.chat.id]["product_data"][4]}.jpg')  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
                img = open(f"{file_path}", 'rb')
                # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
                bot.send_photo(config.manager_id, img,
                               caption=f'–ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑!\n'
                                       f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º - {user_states[message.chat.id]["product_data"][4]}:\n'
                                       f'–ù–∞–∑–≤–∞–Ω–∏–µ: {user_states[message.chat.id]["product_data"][1]}\n'
                                       f'–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {user_states[message.chat.id]["price"]} ‚ÇΩ\n'
                                       f'–î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∞: {user_states[message.chat.id]["size"]} {user_states[message.chat.id]["product_data"][3].split(" ")[1]}\n\n'

                                       f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n'
                                       f'–ù–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {message.from_user.username}\n'
                                       f'–§–ò–û - {user_states[message.chat.id]["name"]}\n'
                                       f'–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {user_states[message.chat.id]["phone"]}\n'
                                       f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–ª–∏—á–∏–∏ –∫–∞—Ä—Ç—ã - {"–ï—Å—Ç—å –∫–∞—Ä—Ç–∞" if user_states[message.chat.id]["card"] == 1 else ("–ù—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ –Ω–∞–ª–∏—á–∏–∏" if user_states[message.chat.id]["card"] == 2 else "–ù–µ—Ç –∫–∞—Ä—Ç—ã")}')

                del user_states[message.chat.id]['price']
                markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
                bottom1 = types.KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –µ—â–µ")
                bottom2 = types.KeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å")
                markup.row(bottom1, bottom2)

                bot.send_message(message.chat.id,
                                 f'–í–∞—à –∑–∞–∫–∞–∑ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É. –í —Ç–µ—á–µ–Ω–∏–µ 12 —Ä–∞–±–æ—á–∏—Ö —á–∞—Å–æ–≤ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø—Ä–∏–µ–º–∞ –æ–ø–ª–∞—Ç—ã',
                                 parse_mode='html',
                                 reply_markup=markup)
            else:
                if user_states[message.chat.id]['price']:
                    del user_states[message.chat.id]['price']
                user_states[message.chat.id]['waiting_for_button'] = True
                markup = types.InlineKeyboardMarkup()
                bottom1 = types.InlineKeyboardButton("–í–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ", callback_data="end_of_buy")
                bottom2 = types.InlineKeyboardButton("–ó–∞–∫–æ–Ω—á–∏—Ç—å", callback_data="end")
                markup.row(bottom1, bottom2)
                bot.send_message(message.chat.id,
                                 f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –Ω–∞ –Ω–∞—à–µ–º —Å–∫–ª–∞–¥–µ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–∞, –ø—Ä–∏–Ω–æ—Å–∏–º —Å–≤–æ–∏ –∏–∑–≤–∏–Ω–µ–Ω–∏—è.\n"
                                 f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - –í–≤–µ—Å—Ç–∏ —Ä–∞–∑–º–µ—Ä –ø–æ–≤—Ç–æ—Ä–Ω–æ, –∏ –≤–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –º–µ–Ω—å—à–∏–π, —á–µ–º {user_states[message.chat.id]['product_data'][3]}\n"
                                 f"–ò–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É - –ó–∞–∫–æ–Ω—á–∏—Ç—å, –µ—Å–ª–∏ –í–∞–º –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –µ—Å—Ç—å –≤ –Ω–∞–ª–∏—á–∏–∏",
                                 reply_markup=markup)
                bot.register_next_step_handler(message, check_button_press)
        else:
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∫–∞–Ω–∏ (–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –¢–û–õ–¨–ö–û –∏–∑ —Ü–∏—Ñ—Ä).")
            bot.register_next_step_handler(message, end_of_work)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç–∫–∞–Ω–∏ (–æ–Ω —Å–æ—Å—Ç–æ–∏—Ç –¢–û–õ–¨–ö–û –∏–∑ —Ü–∏—Ñ—Ä).")
        bot.register_next_step_handler(message, end_of_work)


def get_name(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['name'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['name']):
            mainKeyboard(message)
        elif re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+$', user_states[message.chat.id]['name']):
            user_states[message.chat.id]['waiting_for_button'] = True
            editUser.update_user_name(user_states[message.chat.id]['name'], message.from_user.id)
            markup = types.InlineKeyboardMarkup()
            bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
            bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='edit_data')
            markup.row(bottom1, bottom2)
            bot.send_message(message.chat.id,
                             f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]["name"]}\n –ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]["phone"]}',
                             reply_markup=markup)
            bot.register_next_step_handler(message, check_button_press)
        else:
            # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            bot.register_next_step_handler(message, get_name)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_name)


def get_phone(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['phone'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['phone']):
            mainKeyboard(message)
        elif re.match(r'^79\d{9}$',
                      user_states[message.chat.id]['phone']):
            user_states[message.chat.id]['waiting_for_button'] = True
            editUser.update_user_phone(user_states[message.chat.id]['phone'], message.from_user.id)
            markup = types.InlineKeyboardMarkup()
            bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
            bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='edit_data')
            markup.row(bottom1, bottom2)
            bot.send_message(message.chat.id,
                             f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]["name"]}\n –ù–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]["phone"]}',
                             reply_markup=markup)
            bot.register_next_step_handler(message, check_button_press)
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 79).")
            bot.register_next_step_handler(message, get_phone)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 79).")
        bot.register_next_step_handler(message, get_phone)


def get_name_from_all(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['name'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['name']):
            mainKeyboard(message)
        elif re.match(r'^[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+\s+[–ê-–Ø–Å–∞-—è—ë]+$', user_states[message.chat.id]['name']):
            bot.send_message(message.chat.id,
                             "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ 79*********")
            bot.register_next_step_handler(message, get_all)
        else:
            # –í–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—É –§–ò–û
            bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
            bot.register_next_step_handler(message, get_name_from_all)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_name_from_all)


def get_all(message):
    if message.content_type == 'text':
        user_states[message.chat.id]['phone'] = message.text.strip()
        if re.match('^/.*$', user_states[message.chat.id]['phone']):
            mainKeyboard(message)
        elif re.match(r'^79\d{9}$',
                      user_states[message.chat.id]['phone']):
            user_states[message.chat.id]['waiting_for_button'] = True
            editUser.update_user_all(user_states[message.chat.id]['phone'], user_states[message.chat.id]['name'],
                                     message.from_user.id)
            markup = types.InlineKeyboardMarkup()
            bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true_enter')
            bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='edit_data')
            markup.row(bottom1, bottom2)
            bot.send_message(message.chat.id,
                             f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:\n –§–ò–û: {user_states[message.chat.id]["name"]}\n –ù–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {user_states[message.chat.id]["phone"]}',
                             reply_markup=markup)
            bot.register_next_step_handler(message, check_button_press)
        else:
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
            bot.send_message(message.chat.id,
                             "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –º–æ–±–∏–ª—å–Ω–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 79).")
            bot.register_next_step_handler(message, get_all)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 11 —Ü–∏—Ñ—Ä –∏ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è –Ω–∞ 79).")
        bot.register_next_step_handler(message, get_all)


def check_card(callback):
    markup = types.InlineKeyboardMarkup()
    bottom1 = types.InlineKeyboardButton("–ï—Å—Ç—å", callback_data="card_true")
    bottom2 = types.InlineKeyboardButton("–ù–µ –∏–º–µ—é", callback_data="card_false")
    bottom3 = types.InlineKeyboardButton("–ù–µ –ø–æ–º–Ω—é", callback_data="card_ignorance")
    markup.row(bottom1, bottom2)
    markup.add(bottom3)

    bot.send_message(callback.message.chat.id,
                     f'–ò–º–µ–µ—Ç—Å—è –ª–∏ —É –≤–∞—Å –¥–∏—Å–∫–æ–Ω—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫ –¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É - {user_states[callback.message.chat.id]["phone"]}',
                     reply_markup=markup)


def check_button_press(message):
    chat_id = message.chat.id

    if user_states[chat_id].get('waiting_for_button', True):
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        bot.register_next_step_handler(message, check_button_press)
    else:
        return


def consultation(callback):
    markup111 = types.InlineKeyboardMarkup()
    bottom1 = types.InlineKeyboardButton("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='advice')
    bottom2 = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ", callback_data='end_of_buy')
    markup111.row(bottom1, bottom2)

    bot.send_message(callback.message.chat.id, "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã)\n"
                                               "–ù—É–∂–Ω–∞ –ª–∏ –≤–∞–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞?")
    bot.send_message(callback.message.chat.id,
                     "–í—ã–±–µ—Ä–∏—Ç–µ <b>–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ</b>, –µ—Å–ª–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞.\n"
                     "–í—ã–±–µ—Ä–∏—Ç–µ <b>–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è</b>, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞", parse_mode='html', reply_markup=markup111)


@bot.message_handler()
def info(message):
    if message.text.lower() == '–ø—Ä–∏–≤–µ—Ç':
        bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n "
                                          "–Ø - <b>—ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –º–∞–≥–∞–∑–∏–Ω–∞ –ø–æ –ø—Ä–æ–¥–∞–∂–µ —Ç–∫–∞–Ω–µ–π</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑.".format(
            message.from_user, bot.get_me()),
                         parse_mode='html')
    else:
        bot.reply_to(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è((')


if __name__ == "__main__":
    bot.polling(none_stop=True)
