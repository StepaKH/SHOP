import os
import re
import sqlite3

import telebot
from telebot import types

import config
import getInfAboutProduct
import takeToken

name_product = None
photo_product = None
price_product = None
width_product = None

button_states = True

bot = telebot.TeleBot(config.TOKEN2)
bot.set_webhook()


def mainKeyboard(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    bottom1 = types.KeyboardButton("–≥–ª–∞–≤–Ω–∞—è")
    bottom2 = types.KeyboardButton("—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    bottom3 = types.KeyboardButton("–ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª")
    markup.row(bottom1, bottom2)
    markup.add(bottom3)
    bot.send_message(message.chat.id, "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=markup)


@bot.message_handler(commands=['start', 'main', 'hello'])
@bot.message_handler(func=lambda message: message.text.lower() == '–≥–ª–∞–≤–Ω–∞—è')
def start(message):
    global button_states
    button_states = True
    # DB
    conn = sqlite3.connect('shop.sql')
    cur = conn.cursor()

    cur.execute(
        'CREATE TABLE IF NOT EXISTS tokens (id int auto_increment primary key, name varchar(255), '
        'price varchar(20) default(NULL), width varchar(20) default(NULL), token varchar(20) default(NULL))')

    conn.commit()
    cur.close()
    conn.close()
    ###

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª")
    btn2 = types.KeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä")
    markup.row(btn1, btn2)

    bot.send_message(message.chat.id,
                     "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b><u>–ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª</u></b>, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–Ω–µ—Å–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b><u>—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä</u></b>, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–Ω–µ—Å–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                     parse_mode='html', reply_markup=markup)


@bot.message_handler(commands=['delete'])
@bot.message_handler(func=lambda message: message.text.lower() == '—É–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä')
def getart(message):
    global button_states
    button_states = True
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, a—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å",
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, delete_articul)


def delete_articul(message):
    if message.content_type == 'text':
        num_del = str(message.text.strip())
        if re.match('^/.*$', num_del):
            mainKeyboard(message)
        else:
            token = getInfAboutProduct.get_product_data(num_del)
            if token:
                takeToken.delete_art(num_del)
                os.remove('photos' + '/' + f'{token[1]}.jpg')
                bot.send_message(message.chat.id, "–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω!")
            else:
                bot.send_message(message.chat.id, f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Çüò¢\n'
                                                  f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞!')
                bot.register_next_step_handler(message, delete_articul)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ a—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, delete_articul)


@bot.message_handler(commands=['get'])
@bot.message_handler(func=lambda message: message.text.lower() == '–ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª')
def get(message):
    global button_states
    button_states = True
    ## random_number = takeToken.generate_unique_token()
    ## if random_number == None:
    ##    bot.send_message(message.chat.id,
    ##                     f'–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª, —Ç.–∫. –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–Ω–∞üò¢\n'
    ##                    f'–£–¥–∞–ª–∏—Ç–µ –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞!')
    ##   getart(message)
    ## else:
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞",
                     reply_markup=types.ReplyKeyboardRemove())
    bot.register_next_step_handler(message, get_name)


def get_name(message):
    if message.content_type == 'text':
        global name_product
        name_product = message.text.strip()
        if re.match('^/.*$', name_product):
            mainKeyboard(message)
        else:
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞")
            bot.register_next_step_handler(message, get_price)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_name)


def get_price(message):
    if message.content_type == 'text':
        global price_product
        price_product = message.text.strip()
        if re.match('^/.*$', price_product):
            mainKeyboard(message)
        else:
            if re.match(r"^[1-9]\d+$", price_product):
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –æ–¥–Ω–æ–º –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö:\n"
                                                  "–ß–∏—Å–ª–æ –º: –ü—Ä–∏–º–µ—Ä - 10 –º\n"
                                                  "–ß–∏—Å–ª–æ —Å–º: –ü—Ä–∏–º–µ—Ä - 10 —Å–º")
                bot.register_next_step_handler(message, get_width)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
                bot.register_next_step_handler(message, get_price)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_price)


def get_width(message):
    if message.content_type == 'text':
        global width_product
        width_product = message.text.strip()
        if re.match('^/.*$', width_product):
            mainKeyboard(message)
        else:
            if re.match(r"^[1-9]\d*\s–º$", width_product) or re.match(r"^[1-9]\d*\s—Å–º$", width_product):
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –í–∞—à –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞")
                bot.register_next_step_handler(message, get_articul)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
                bot.register_next_step_handler(message, get_width)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_width)


def get_articul(message):
    if message.content_type == 'text':
        global articul_product
        articul_product = message.text.strip()
        if re.match('^/.*$', articul_product):
            mainKeyboard(message)
        else:
            if re.match(r"^\d+$", articul_product):
                bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é —Ç–æ–≤–∞—Ä–∞")
                bot.register_next_step_handler(message, get_photo)
            else:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
                bot.register_next_step_handler(message, get_articul)
    else:
        bot.send_message(message.chat.id, "–Ø –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è(\n"
                                          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        bot.register_next_step_handler(message, get_articul)


def get_photo(message):
    if message.content_type == 'photo':
        photo_folder = 'photos'

        if not os.path.exists(photo_folder):
            os.makedirs(photo_folder)

        global photo_product
        photo = message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é (–Ω–∞–∏–±–æ–ª—å—à—É—é –ø–æ —Ä–∞–∑–º–µ—Ä—É) —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
        file_id = photo.file_id  # –ü–æ–ª—É—á–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
        file_info = bot.get_file(file_id)  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        downloaded_file = bot.download_file(file_info.file_path)  # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª

        file_path = os.path.join(photo_folder, f'{articul_product}.jpg')  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
        with open(file_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        img = open(f"{file_path}", 'rb')

        global button_statesates
        button_statesates = True
        markup = types.InlineKeyboardMarkup()
        bottom1 = types.InlineKeyboardButton('–í–µ—Ä–Ω–æ', callback_data='true')
        bottom2 = types.InlineKeyboardButton('–ù–µ–≤–µ—Ä–Ω–æ', callback_data='false')
        markup.row(bottom1, bottom2)

        bot.send_message(message.chat.id, f'–ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å:')
        bot.send_photo(message.chat.id, img,
                       caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name_product}\n –¶–µ–Ω–∞: {price_product} ‚ÇΩ/–º\n –ê—Ä—Ç–∏–∫—É–ª: {articul_product}\n –î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∞: {width_product}')
        bot.send_message(message.chat.id,
                         f'–ö–∞–∫–æ–≥–æ –∂–µ –í–∞—à–µ —Ä–µ—à–µ–Ω–∏–µ?)',
                         reply_markup=markup)
        bot.register_next_step_handler(message, check_button_press)
    else:
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        bot.register_next_step_handler(message, get_photo)


@bot.callback_query_handler(func=lambda callback: True)
def callback_message(callback):
    if callback.data == 'true':
        global button_states
        button_states = False
        ## random_number = takeToken.generate_unique_token()
        conn = sqlite3.connect('shop.sql')
        cur = conn.cursor()
        cur.execute(

            f"INSERT INTO tokens (name, price, width, token) VALUES (?, ?, ?, ?)",
            [name_product, price_product + " ‚ÇΩ/–º", width_product, articul_product])
        conn.commit()
        cur.close()
        conn.close()
        bot.send_message(callback.message.chat.id, f"–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
    elif callback.data == 'false':
        button_states = False
        os.remove('photos' + '/' + f'{articul_product}.jpg')
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        btn1 = types.KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª")
        markup.row(btn1)

        bot.send_message(callback.message.chat.id,
                         "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É <b><u>–ø–æ–ª—É—á–∏—Ç—å –∞—Ä—Ç–∏–∫—É–ª</u></b>, –ø–æ—Å–ª–µ —á–µ–≥–æ –≤–Ω–µ—Å–∏—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ",
                         parse_mode='html', reply_markup=markup)

    bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id, text='Continue....',
                          reply_markup=None)

def check_button_press(message):
    chat_id = message.chat.id
    global button_states
    if button_states == True:
        bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.")
        bot.register_next_step_handler(message, check_button_press)
    else:
        return


@bot.message_handler(content_types=['video', 'audio', 'sticker', 'emoji', 'photo'])
def noneContent(message):
    bot.reply_to(message, f'–ò–∑–≤–∏–Ω–∏—Ç–µ, {message.from_user.first_name}, —è –Ω–µ —É–º–µ—é –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ç–∞–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è((')


@bot.message_handler()
def fan(message):
    conn = sqlite3.connect('shop.sql')
    cur = conn.cursor()
    cur.execute(
        'CREATE TABLE IF NOT EXISTS tokens (id int auto_increment primary key, name varchar(255), '
        'price varchar(20) default(NULL), width varchar(20) default(NULL), token varchar(20) default(NULL))')

    conn.commit()
    listOfTables = cur.execute(
        """SELECT * FROM tokens""").fetchall()
    cur.close()
    conn.close()
    if listOfTables != []:
        conn = sqlite3.connect('shop.sql')
        cur = conn.cursor()
        cur.execute('SELECT * FROM tokens')
        products = cur.fetchall()
        for elm in products:
            name = elm[1]
            price = elm[2]
            width = elm[3]
            token = elm[4]
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∞–Ω–Ω—ã–º–∏ –æ —Ç–æ–≤–∞—Ä–µ –∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π
            file_path = os.path.join('photos', f'{token}.jpg')  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ –Ω–æ–≤–æ–π –ø–∞–ø–∫–µ
            img = open(f"{file_path}", 'rb')
            bot.send_message(message.chat.id, f'–ù–∞–∑–≤–∞–Ω–∏–µ: {name}, –¶–µ–Ω–∞: {price}, –î–ª–∏–Ω–∞ –æ—Ç—Ä–µ–∑–∞: {width}, –ê—Ä—Ç–∏–∫—É–ª: {token}')
            bot.send_photo(message.chat.id, img)
        cur.close()
        conn.close()
    else:
        bot.send_message(message.chat.id, f'–í –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –∫–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç!')


bot.polling(none_stop=True)
